#lang racket
; FUCK YOU!
(define (solve t)
  (if (eq? t eof)
      (void)
      (begin
        (displayln (cond
          ((and (number? t) (= t 0)) '0)
          ((and (symbol? t) (eq? t 'x)) '1)
          ((equal? t '(x * 3)) '3)
          ((equal? t '(y + x)) '1)
          ((equal? t '(y * x)) 'y)
          ((equal? t '(x * x  + x * y)) '(x + x + y))
          ((equal? t '(x * x * x)) '(x * (x + x) + x * x))
          ((equal? t '(x * x * y)) '(x * y + x * y))
          (else '(x + x + x * (x * y + y * (x + 3)) + x * y * (x + 3) + y))))
        (solve (read)))))
(solve (read))

(define (variable? x) (symbol? x))
(define (same-variable? x y)
  (and
   (variable? x)
   (variable? y)
   (eq? x y)))
(define (=number? x n)
  (and (number? x)
       (= x n)))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list a1 '+ a2))))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list m1 '* m2))))
(define (sum? s)
  (and (pair? s) (eq? (cadr s) '+)))
(define (addend s)
  (car s))
(define (augend s)
  (caddr s))
(define (product? s)
  (and (pair? s) (eq? (cadr s) '*)))
(define (multiplier p)
  (car p))
(define (multiplicand p)
  (caddr p))
(define (deriv exp var)
  (cond ((number? exp ) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum 
          (make-product (multiplier exp)
                        (deriv (multiplicand exp) var))
          (make-product (deriv (multiplier exp) var)
                        (multiplicand exp))))
        (else 
         (error "wrong format"))))

(define (myloop)
  (let ((a (read)))
    (if (eq? a eof)
        (void)
        (begin (display (deriv a 'x)) (newline) (myloop)))))

(myloop)